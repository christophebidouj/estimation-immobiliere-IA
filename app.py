"""
===========================================================
INTERFACE STREAMLIT IMMOBILI√àRE - VERSION P√âDAGOGIQUE
===========================================================

Ce fichier cr√©er une belle interface web avec Streamlit
pour utiliser notre mod√®le d'IA immobili√®re.

Streamlit transforme du code Python en application web !
"""

import streamlit as st
import numpy as np
import warnings

# Supprimer les warnings sklearn pour une interface plus propre
warnings.filterwarnings('ignore', category=UserWarning, module='sklearn')
warnings.filterwarnings('ignore', message='X does not have valid feature names')

# Configuration de la page web
st.set_page_config(
    page_title="Estimateur Immobilier IA",
    page_icon="üè°",
    layout="centered",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour le bouton d'estimation et le bloc de r√©sultat
st.markdown("""
<style>
    /* Style pour le bouton d'estimation */
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        color: white !important;
        border: none !important;
        border-radius: 10px !important;
        padding: 0.75rem 2rem !important;
        font-weight: bold !important;
        font-size: 1.1rem !important;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4) !important;
        transition: all 0.3s ease !important;
        text-transform: uppercase !important;
        letter-spacing: 1px !important;
    }
    
    .stButton > button:hover {
        background: linear-gradient(135deg, #764ba2 0%, #667eea 100%) !important;
        box-shadow: 0 6px 20px rgba(118, 75, 162, 0.6) !important;
        transform: translateY(-2px) !important;
    }
    
    .stButton > button:active {
        transform: translateY(0px) !important;
        box-shadow: 0 2px 10px rgba(102, 126, 234, 0.3) !important;
    }
    
    /* Animation de pulsation pour attirer l'attention */
    @keyframes pulse {
        0% { box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4); }
        50% { box-shadow: 0 6px 25px rgba(102, 126, 234, 0.6); }
        100% { box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4); }
    }
    
    .stButton > button {
        animation: pulse 2s infinite !important;
    }
    
    /* Style pour le bloc de r√©sultat - adaptatif selon le th√®me */
    .price-result-box {
        text-align: center;
        padding: 30px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 15px;
        color: white !important;
        margin: 20px 0;
        box-shadow: 0 8px 32px rgba(102, 126, 234, 0.2);
    }
    
    .price-value {
        color: white !important;
        margin: 0 !important;
        font-size: 2.8em !important;
        font-weight: bold !important;
    }
    
    .price-label {
        color: white !important;
        margin: 10px 0 !important;
        font-size: 1.2em !important;
        opacity: 0.9;
    }
    
    .price-description {
        color: white !important;
        margin: 0 !important;
        font-size: 0.95em !important;
        opacity: 0.8;
    }
</style>
""", unsafe_allow_html=True)

# Import de notre mod√®le IA
try:
    from modelisation import estimer_prix_immobilier
except ImportError:
    st.error("‚ùå Impossible d'importer le mod√®le. V√©rifiez que 'modelisation.py' est pr√©sent.")
    st.stop()

def formater_affichage_ville(code_postal):
    """
    Fonction pour afficher joliment la localisation
    Exemple : 75001 ‚Üí "Paris 1er"
    """
    if not code_postal or len(code_postal) != 5:
        return "Paris"
    
    if code_postal.startswith('75'):
        arrondissement = code_postal[2:4]
        if arrondissement and arrondissement != '00':
            numero = arrondissement.lstrip('0')
            if numero:
                return f"Paris {numero}√®me"
        return "Paris"
    
    departement = code_postal[:2]
    return f"D√©partement {departement}"

def calculer_prix_realiste(prix_ia, surface, code_postal, type_bien, terrain=0):
    """
    Fonction qui corrige les prix de l'IA pour qu'ils soient plus r√©alistes
    en les comparant aux prix moyens du march√© fran√ßais.
    """
    
    # Prix moyens r√©els par m¬≤ en France (donn√©es 2024)
    prix_moyen_m2 = {
        # Paris par arrondissement
        '75001': 12000, '75002': 10500, '75003': 9800, '75004': 11500,
        '75005': 10200, '75006': 12500, '75007': 12000, '75008': 13000,
        '75009': 9200, '75010': 8500, '75011': 8800, '75012': 8000,
        '75013': 7500, '75014': 8500, '75015': 8800, '75016': 11000,
        '75017': 9200, '75018': 7500, '75019': 7000, '75020': 8000,
        '75': 9200,  # Paris en g√©n√©ral
        
        # √éle-de-France
        '92': 6500, '93': 3800, '94': 4200, '77': 3000, 
        '78': 3800, '91': 3400, '95': 3200,
        
        # Grandes villes
        '06': 5200,  # Nice
        '13': 3500,  # Marseille
        '69': 4200,  # Lyon
        '33': 3800,  # Bordeaux
        '31': 3400,  # Toulouse
    }
    
    # R√©cup√©rer le prix de r√©f√©rence
    dept = code_postal[:2] if len(code_postal) > 2 else code_postal
    prix_ref_m2 = prix_moyen_m2.get(code_postal, prix_moyen_m2.get(dept, 2800))
    
    # Calculer le prix de r√©f√©rence pour ce bien
    prix_reference = prix_ref_m2 * surface
    
    # Ajustements selon le type de bien
    if type_bien == 'Maison' and surface > 0:
        # Les maisons sont g√©n√©ralement plus ch√®res que les appartements
        facteur_maison = 1.08  # +8%
        
        # Ajustement selon la taille
        if surface > 150:
            facteur_maison *= 0.95  # L√©g√®re d√©cote pour tr√®s grandes surfaces
        elif surface < 80:
            facteur_maison *= 1.05  # Prime pour petites maisons (plus rares)
        
        # Bonus pour le terrain
        if terrain > 200:
            facteur_maison *= 1.02  # +2% pour grand terrain
        
        prix_reference *= facteur_maison
    
    elif type_bien == 'Local':
        prix_reference *= 0.75  # -25% pour local commercial
    elif type_bien == 'D√©pendance':
        prix_reference *= 0.6   # -40% pour d√©pendance
    
    print(f"üîç Prix IA: {prix_ia:,.0f}‚Ç¨, Prix r√©f√©rence: {prix_reference:,.0f}‚Ç¨")
    
    # Logique de correction intelligente
    if prix_ia <= 0:
        return prix_reference
    
    ratio = prix_ia / prix_reference
    
    # Correction selon l'√©cart avec le march√©
    if 0.7 <= ratio <= 1.3:
        # L'IA est coh√©rente, correction l√©g√®re
        prix_final = prix_ia * 0.85 + prix_reference * 0.15
    elif 1.3 < ratio <= 1.8:
        # L'IA surestime mod√©r√©ment
        prix_final = prix_ia * 0.5 + prix_reference * 0.5
    elif ratio > 1.8:
        # L'IA surestime beaucoup
        prix_final = prix_ia * 0.3 + prix_reference * 0.7
    else:  # ratio < 0.7
        # L'IA sous-estime
        prix_final = prix_ia * 0.7 + prix_reference * 0.3
    
    # S√©curit√© finale : limites absolues
    prix_min = prix_ref_m2 * surface * 0.4
    prix_max = prix_ref_m2 * surface * 1.8
    
    if type_bien == 'Maison':
        prix_max *= 1.1  # Plus de tol√©rance pour les maisons
    
    prix_final = max(prix_min, min(prix_max, prix_final))
    
    print(f"üí∞ Prix final corrig√©: {prix_final:,.0f}‚Ç¨")
    return prix_final

def valider_donnees_utilisateur(surface, pieces, code_postal, terrain, type_bien):
    """
    V√©rifier que les donn√©es saisies par l'utilisateur sont coh√©rentes
    """
    erreurs = []
    
    # V√©rification code postal
    if not code_postal or len(code_postal) != 5 or not code_postal.isdigit():
        erreurs.append("‚ö†Ô∏è Le code postal doit contenir exactement 5 chiffres")
    
    # V√©rification surface
    if surface < 8:
        erreurs.append("‚ö†Ô∏è La surface semble trop petite (minimum 8 m¬≤)")
    elif surface > 1000:
        erreurs.append("‚ö†Ô∏è La surface semble tr√®s importante (plus de 1000 m¬≤)")
    
    # V√©rification coh√©rence terrain/surface
    if terrain >= 0 and surface > terrain and type_bien != 'Appartement' and type_bien!= 'Local' :
        erreurs.append("‚ö†Ô∏è La surface habitable ne peut pas √™tre plus grande que le terrain")
    
    # V√©rifications sp√©ciales pour les maisons
    if type_bien == 'Maison':
        if pieces < 3:
            erreurs.append("üí° Une maison a g√©n√©ralement au moins 3 pi√®ces")
        if surface < 50:
            erreurs.append("üí° La surface semble petite pour une maison")
    
    return erreurs

# ==========================================
# INTERFACE UTILISATEUR STREAMLIT
# ==========================================

# Titre principal de l'application
st.title("üè° Estimation Immobili√®re")
st.markdown("*Estimation de prix par Intelligence Artificielle (France)*")

# Barre lat√©rale avec informations
with st.sidebar:
    st.markdown("### üìä Mod√®le IA")
    st.info("‚úÖ Mod√®le entra√Æn√© sur 1M+ transactions")
    st.info("üîß Correction automatique v3")
    st.info("üìç Couverture nationale France")
    st.info("üõ°Ô∏è S√©curit√©s anti-aberrations")
    
    st.markdown("### üí° Conseil")
    st.caption("Pour une estimation pr√©cise, renseignez tous les champs disponibles")

# Formulaire principal
st.markdown("### üìã Caract√©ristiques de votre bien immobilier")

# Premi√®re ligne : infos de base
col1, col2 = st.columns(2)

with col1:
    surface = st.number_input(
        "**Surface habitable (m¬≤)**",
        min_value=8.0, 
        max_value=1000.0, 
        value=75.0,
        step=1.0,
        help="Surface r√©elle habitable (hors garage, cave, grenier)"
    )
    
    pieces = st.selectbox(
        "**Nombre de pi√®ces principales**",
        options=list(range(1, 16)),
        index=3,  # 4 pi√®ces par d√©faut
        help="Chambres + salon + s√©jour (cuisine et salle de bain non comprises)"
    )

with col2:
    code_postal = st.text_input(
        "**Code postal**",
        value="75001",
        max_chars=5,
        help="Code postal fran√ßais √† 5 chiffres"
    )
    
    type_bien = st.selectbox(
        "**Type de bien**",
        options=['Appartement', 'Maison', 'Local', 'D√©pendance'],
        index=1,  # Maison par d√©faut
        help="Type de local immobilier"
    )

# Deuxi√®me ligne : d√©tails compl√©mentaires
col3, col4 = st.columns(2)

with col3:
    # Terrain seulement si pertinent
    if type_bien in ['Maison', 'D√©pendance']:
        terrain = st.number_input(
            "**Surface terrain (m¬≤)**",
            min_value=0.0,
            max_value=10000.0,
            value=300.0 if type_bien == 'Maison' else 0.0,
            step=10.0,
            help="Surface du terrain priv√©"
        )
    else:
        terrain = 0.0
        st.markdown("**Surface terrain**")
        st.caption("Non applicable pour ce type de bien")

with col4:
    annee = st.selectbox(
        "**Ann√©e de r√©f√©rence**",
        options=[2024, 2023, 2022, 2021, 2020],
        help="Ann√©e pour l'estimation des prix"
    )

# S√©parateur visuel
st.markdown("---")

# Bouton d'estimation bien visible
col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
with col_btn2:
    bouton_estimer = st.button(
        "üîç **ESTIMER LE PRIX**",
        type="primary",
        use_container_width=True,
        help="Lancer l'estimation par IA"
    )

# Traitement quand on clique sur le bouton
if bouton_estimer:
    # Validation des donn√©es
    erreurs = valider_donnees_utilisateur(surface, pieces, code_postal, terrain, type_bien)
    
    if erreurs:
        # Afficher les erreurs
        for erreur in erreurs:
            if erreur.startswith("üí°"):
                st.info(erreur)
            else:
                st.error(erreur)
    else:
        # Lancer l'estimation
        with st.spinner("üß† L'IA analyse votre bien immobilier..."):
            try:
                # Param√®tres pour l'IA
                recent = 1 if annee >= 2023 else 0
                
                # Appel du mod√®le IA
                prix_ia = estimer_prix_immobilier(
                    surface=surface,
                    pieces=pieces,
                    dept=code_postal[:2],
                    terrain=terrain,
                    type_local=type_bien,
                    recent=recent
                )
                
                if prix_ia is None:
                    st.error("‚ùå Erreur lors du calcul. V√©rifiez que le mod√®le est entra√Æn√©.")
                else:
                    # Correction pour un prix plus r√©aliste
                    prix_final = calculer_prix_realiste(prix_ia, surface, code_postal, type_bien, terrain)
                    
                    # V√©rification de coh√©rence
                    prix_m2_final = prix_final / surface
                    if prix_m2_final > 12000 and code_postal.startswith('75'):
                        st.warning(f"‚ö†Ô∏è Prix √©lev√© pour Paris ({prix_m2_final:,.0f}‚Ç¨/m¬≤)")
                    elif prix_m2_final > 8000 and not code_postal.startswith('75'):
                        st.warning(f"‚ö†Ô∏è Prix tr√®s √©lev√© pour cette zone ({prix_m2_final:,.0f}‚Ç¨/m¬≤)")
                    
                    # ===== AFFICHAGE DU R√âSULTAT =====
                    st.markdown("### üí∞ Estimation du prix immobilier")
                    
                    # Prix principal avec un design adaptatif
                    st.markdown(f"""
                    <div class="price-result-box">
                        <h1 class="price-value">{prix_final:,.0f} ‚Ç¨</h1>
                        <p class="price-label">Prix estim√©</p>
                        <p class="price-description">Estimation par IA avec correction de march√© optimis√©e</p>
                    </div>
                    """.replace(",", " "), unsafe_allow_html=True)
                    
                    # M√©triques d√©taill√©es
                    col_m1, col_m2, col_m3 = st.columns(3)
                    
                    with col_m1:
                        # Fourchette d'estimation avec format plus compact
                        marge = prix_final * 0.20
                        prix_min = prix_final - marge
                        prix_max = prix_final + marge
                        
                        # Format K‚Ç¨ pour gagner de la place
                        prix_min_k = prix_min / 1000
                        prix_max_k = prix_max / 1000
                        
                        st.metric(
                            "üìä Fourchette",
                            f"{prix_min_k:.0f}K - {prix_max_k:.0f}K ‚Ç¨",
                            help="Intervalle de confiance ¬±20%"
                        )
                    
                    with col_m2:
                        # Prix au m√®tre carr√© avec indicateur de coh√©rence am√©lior√©
                        prix_m2 = prix_final / surface
                        dept = code_postal[:2] if len(code_postal) >= 2 else '75'
                        
                        # Seuils adapt√©s par zone
                        if dept == '75':  # Paris
                            seuil_bas, seuil_haut = 7000, 13000
                            ref_moy = 9200
                        elif dept in ['92', '93', '94']:  # Petite couronne
                            seuil_bas, seuil_haut = 3500, 7000
                            ref_moy = 5000
                        elif dept in ['77', '78', '91', '95']:  # Grande couronne
                            seuil_bas, seuil_haut = 2500, 4500
                            ref_moy = 3200
                        else:  # Province
                            seuil_bas, seuil_haut = 2000, 5000
                            ref_moy = 3000
                        
                        if prix_m2 > seuil_haut:
                            delta = "‚ö†Ô∏è Tr√®s √©lev√©"
                        elif prix_m2 > ref_moy * 1.2:
                            delta = "üìà Haut de gamme"
                        elif prix_m2 < seuil_bas:
                            delta = "üìâ Tr√®s bas"
                        elif prix_m2 < ref_moy * 0.8:
                            delta = "üí∞ Bon prix"
                        else:
                            delta = "‚úÖ Normal"
                            
                        st.metric(
                            "üìê Prix au m¬≤",
                            f"{prix_m2:,.0f}  ‚Ç¨/m¬≤".replace(",", " "),
                            delta=delta,
                            help="Prix par m√®tre carr√© habitable avec indicateur de coh√©rence"
                        )
                    
                    with col_m3:
                        if terrain > 0:
                            # Calcul plus r√©aliste du prix terrain
                            part_terrain = min(0.3, terrain / (surface * 4))  # Max 30% de la valeur
                            valeur_terrain_estimee = prix_final * part_terrain
                            terrain_m2 = valeur_terrain_estimee / terrain if terrain > 0 else 0
                            
                            st.metric(
                                "üåø Terrain au m¬≤",
                                f"{terrain_m2:,.0f} ‚Ç¨/m¬≤".replace(",", " "),
                                help="Estimation de la valeur du terrain (20-30% du prix total)"
                            )
                        else:
                            # Ratio qualit√©/prix selon la zone
                            if dept == '75':
                                ratio_ref = prix_m2 / 9200  # Prix moyen Paris r√©el
                                if ratio_ref < 0.8:
                                    qualite = "üî• Tr√®s bon prix"
                                elif ratio_ref < 1.2:
                                    qualite = "‚úÖ Prix correct"
                                else:
                                    qualite = "üí∏ Prix √©lev√©"
                            else:
                                qualite = f"üìç {type_bien}"
                            
                            st.metric(
                                "üéØ √âvaluation",
                                delta,
                                help="√âvaluation qualit√©/prix pour la zone"
                            )
                    
                    # ===== ANALYSE G√âOGRAPHIQUE =====
                    st.markdown("### üìç Analyse du march√© local")
                    
                    localisation = formater_affichage_ville(code_postal)
                    
                    # Messages contextuels selon la zone
                    if code_postal.startswith('75'):
                        st.info(f"üèôÔ∏è **{localisation}** - March√© parisien premium, prix moyen ~9 200‚Ç¨/m¬≤")
                    elif dept == '92':
                        st.info("üíº **Hauts-de-Seine** - March√© haut de gamme, prix moyen ~6 500‚Ç¨/m¬≤")
                    elif dept in ['93', '94']:
                        st.info("üöá **Petite couronne parisienne** - March√© dynamique, prix moyen ~4 000‚Ç¨/m¬≤")
                    elif dept in ['77', '78', '91', '95']:
                        st.info("üèòÔ∏è **Grande couronne parisienne** - March√© r√©sidentiel, prix moyen ~3 200‚Ç¨/m¬≤")
                    elif dept in ['06', '13', '69', '33']:
                        st.info("üåü **Grande m√©tropole fran√ßaise** - March√© urbain attractif")
                    else:
                        st.info("üåç **March√© local** - Estimation adapt√©e aux sp√©cificit√©s r√©gionales")
                    
                    # Conseils selon le type de bien
                    if type_bien == 'Maison' and terrain > 0:
                        if terrain > 500:
                            st.success(f"üå≥ Maison avec grand terrain ({terrain}m¬≤) - Atout majeur pour la valeur")
                        elif terrain > 200:
                            st.info(f"üè° Maison avec terrain confortable ({terrain}m¬≤) - Bon √©quilibre")
                        else:
                            st.info(f"üè† Maison avec petit terrain ({terrain}m¬≤) - Optimisation d'espace")
                    
                    # ===== RECOMMANDATIONS PERSONNALIS√âES =====
                    with st.expander("üí° Recommandations pour votre bien"):
                        
                        st.markdown("**Facteurs qui peuvent influencer le prix r√©el :**")
                        
                        # Recommandations selon le type
                        if type_bien == 'Maison':
                            st.write("üè° **Pour une maison :**")
                            st.write("‚Ä¢ √âtat de la toiture et de l'isolation")
                            st.write("‚Ä¢ Syst√®me de chauffage et performance √©nerg√©tique")
                            st.write("‚Ä¢ Am√©nagement et exposition du jardin")
                            st.write("‚Ä¢ Garage, parking ou d√©pendances")
                            
                            if terrain > 300:
                                st.write("‚Ä¢ üåü Votre grand terrain est un atout majeur")
                            if pieces >= 5:
                                st.write("‚Ä¢ üè† Maison familiale : recherch√©e sur le march√©")
                        
                        else:  # Appartement
                            st.write("üè¢ **Pour un appartement :**")
                            st.write("‚Ä¢ √âtage et pr√©sence d'ascenseur")
                            st.write("‚Ä¢ Balcon, terrasse ou loggia")
                            st.write("‚Ä¢ Vue et luminosit√©")
                            st.write("‚Ä¢ Standing de l'immeuble")
                            st.write("‚Ä¢ Cave, parking ou box")
                        
                        # Recommandations g√©ographiques
                        if dept == '75':
                            st.write("üìç **Sp√©cificit√©s parisiennes :**")
                            st.write("‚Ä¢ Proximit√© m√©tro cruciale")
                            st.write("‚Ä¢ Hauteur sous plafond")
                            st.write("‚Ä¢ Charges de copropri√©t√©")
                        
                        st.markdown("üí∞ **Pour une vente optimale :**")                        
                        st.write("‚Ä¢ Consid√©rer des travaux de rafra√Æchissement")
                        st.write("‚Ä¢ Mettre en valeur les points forts uniques")
                        st.write("‚Ä¢ Consulter plusieurs agents immobiliers locaux")
                    
                    # ===== AVERTISSEMENTS PROFESSIONNELS =====
                    st.markdown("### ‚ö†Ô∏è Informations importantes")
                    
                    st.warning(f"""
                    **Cette estimation est fournie √† titre indicatif** et ne constitue pas une expertise immobili√®re officielle
                    
                    **Sp√©cificit√©s de cette estimation :**
                    ‚Ä¢ Correction automatique v3 appliqu√©e (facteur {prix_final/prix_ia:.2f}x)                  
                                        
                    **Facteurs non pris en compte par l'IA :**
                    ‚Ä¢ √âtat g√©n√©ral du bien et travaux n√©cessaires
                    ‚Ä¢ Vue, exposition et prestations sp√©ciales
                    ‚Ä¢ Environnement imm√©diat et nuisances
                    ‚Ä¢ March√© local tr√®s r√©cent 
                    
                    **Pour une transaction :** Consultez un professionnel de l'immobilier pour une expertise d√©taill√©e 
                    tenant compte de tous les facteurs sp√©cifiques √† votre bien
                    """)
                    
            except Exception as e:
                st.error(f"‚ùå Erreur lors du calcul: {str(e)}")

# ===== AIDE ET INFORMATIONS =====
st.markdown("---")

# Section conseils avanc√©s
with st.expander("üéØ Conseils d'expert immobilier"):
    st.markdown("""
    **üí° Maximiser la valeur de votre bien :**
    
    **Avant estimation officielle :**
    ‚Ä¢ Rassemblez tous les diagnostics (DPE, amiante, plomb...)
    ‚Ä¢ Listez les travaux r√©cents et am√©liorations
    ‚Ä¢ Identifiez les atouts uniques (vue, exposition, calme...)
    
    **Pour n√©gocier :**
    ‚Ä¢ Cette estimation donne un ordre de grandeur r√©aliste
    ‚Ä¢ Ajustez selon l'√©tat r√©el et les prestations
    ‚Ä¢ Consid√©rez la dynamique du march√© local actuel
    
    **Signal d'alarme :**
    ‚Ä¢ Si estimation tr√®s diff√©rente des attentes ‚Üí v√©rifiez les param√®tres
    ‚Ä¢ Prix/m¬≤ > 15 000 ‚Ç¨ hors Paris ‚Üí probablement surestim√©
    ‚Ä¢ √âcart > 30 % avec autres estimations ‚Üí expertise conseill√©e
    """)

# Information sur la technologie
with st.expander("üßë‚Äçüíª √Ä propos du projet et de ses technologies"):
    st.markdown("""
    **Projet p√©dagogique d'exploration de donn√©es**
    *d√©velopp√© par **Bidouj Christophe***

    **Exploration** de l'IA appliqu√©e aux donn√©es immobili√®res fran√ßaises

    **Exp√©rimentations :**
    ‚Ä¢ Exp√©rimentation sur dataset massif (1M+ transactions DVF)
    ‚Ä¢ Exploration pratique du machine learning en contexte r√©el
    ‚Ä¢ √âtude des biais et corrections sur donn√©es immobili√®res
    ‚Ä¢ Exp√©rimentation sur donn√©es territoriales et financi√®res

    **M√©thodes test√©es :**
    ‚Ä¢ Analyse de patterns g√©ographiques de prix
    ‚Ä¢ Algorithmes de r√©gression sur donn√©es complexes
    ‚Ä¢ Corrections automatiques d'estimations

    ‚ö†Ô∏è **Cadre p√©dagogique** : Exp√©rimentation sur cas r√©el
    """)